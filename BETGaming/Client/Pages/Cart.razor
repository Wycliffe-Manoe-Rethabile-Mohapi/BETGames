@page "/cart"
@inject ICartSrvice CartService

<PageTitle>Shopping Cart</PageTitle>
@if (cartProducts == null || cartProducts.Count==0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container" aligh>
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProdictId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br/>
                    <input type="number" value="@product.Quantity"
                   @onchange="@((ChangeEventArgs e)=>UpdateQuantity(e,product))"
                   class="form-control input-quantity" 
                   min="1"/>
                    <button class="btn-delete" @onclick="@(()=> RemoveProductFromCart(product.ProdictId,product.ProductTypeId))">Remove Item</button>
                </div>
                <div class="cart-product-price">
                    R @(product.Price * product.Quantity)
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): R @cartProducts.Sum(s=>s.Price *s.Quantity)
        </div>
    </div>
}

@code 
{
    List<CartProductResponse> cartProducts = null;
    string message = "loading Cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    public async Task RemoveProductFromCart(int productId,int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);

        await LoadCart();
    }
    private async Task LoadCart()
    {
        if ((await CartService.GetCartItemsAsync()).Count == 0)
        {
            message = "Your cart does not have any products in it.";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProductsAsync();
        }
    }
    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity<1)
        {
            product.Quantity = 1;
        }
        await CartService.UpdateQuantity(product);
    }
}
