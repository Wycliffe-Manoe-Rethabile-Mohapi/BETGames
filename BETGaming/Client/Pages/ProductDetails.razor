@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService


@if (product==null)
{
    <span>@Message</span>
}
else
{
    <div class ="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageURL" alt="@product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
            @if (product.Variants != null && product.Variants.Count > 1)
            {
                <div>
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId"> @variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant()!=null)
            {
                @if (GetSelectedVariant().OriginalPrice>GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@GetSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@GetSelectedVariant().Price
                </h4>
                
            }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>
    
}

    @code 
{
    private Product? product = null;
    public string Message { get; set; }
    public int currentTypeId { get; set; }

    [Parameter]
    public int Id { get; set; }

    protected override async  Task  OnParametersSetAsync()
    {
        Message = "loading Product...";

        var result = await ProductService.GetProduct(Id);

        if (!result.Success)
        {
            Message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count>0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;

        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(s => s.Price);
        return $"Starting at ${minPrice}";
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(s => s.ProductTypeId == currentTypeId);
        return variant;
    }
    private async Task AddToCart()
    {
        var selectedVariant = GetSelectedVariant();
        var carItem = new CartItem()
            {
                ProductId = selectedVariant.ProductId,
                ProductypeId = selectedVariant.ProductTypeId,
                Quantity = 1
    };
        await CartService.AddCartItem(carItem);
    }
}
